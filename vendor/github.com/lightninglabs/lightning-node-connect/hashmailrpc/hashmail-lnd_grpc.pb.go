// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package hashmailrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HashMailClient is the client API for HashMail service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HashMailClient interface {
	//
	//NewCipherBox creates a new cipher box pipe/stream given a valid
	//authentication mechanism. If the authentication mechanism has been revoked,
	//or needs to be changed, then a CipherChallenge message is returned.
	//Otherwise the method will either be accepted or rejected.
	NewCipherBox(ctx context.Context, in *CipherBoxAuth, opts ...grpc.CallOption) (*CipherInitResp, error)
	//
	//DelCipherBox attempts to tear down an existing cipher box pipe. The same
	//authentication mechanism used to initially create the stream MUST be
	//specified.
	DelCipherBox(ctx context.Context, in *CipherBoxAuth, opts ...grpc.CallOption) (*DelCipherBoxResp, error)
	//
	//SendStream opens up the write side of the passed CipherBox pipe. Writes
	//will be non-blocking up to the buffer size of the pipe. Beyond that writes
	//will block until completed.
	SendStream(ctx context.Context, opts ...grpc.CallOption) (HashMail_SendStreamClient, error)
	//
	//RecvStream opens up the read side of the passed CipherBox pipe. This method
	//will block until a full message has been read as this is a message based
	//pipe/stream abstraction.
	RecvStream(ctx context.Context, in *CipherBoxDesc, opts ...grpc.CallOption) (HashMail_RecvStreamClient, error)
}

type hashMailClient struct {
	cc grpc.ClientConnInterface
}

func NewHashMailClient(cc grpc.ClientConnInterface) HashMailClient {
	return &hashMailClient{cc}
}

func (c *hashMailClient) NewCipherBox(ctx context.Context, in *CipherBoxAuth, opts ...grpc.CallOption) (*CipherInitResp, error) {
	out := new(CipherInitResp)
	err := c.cc.Invoke(ctx, "/hashmailrpc.HashMail/NewCipherBox", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hashMailClient) DelCipherBox(ctx context.Context, in *CipherBoxAuth, opts ...grpc.CallOption) (*DelCipherBoxResp, error) {
	out := new(DelCipherBoxResp)
	err := c.cc.Invoke(ctx, "/hashmailrpc.HashMail/DelCipherBox", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hashMailClient) SendStream(ctx context.Context, opts ...grpc.CallOption) (HashMail_SendStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &HashMail_ServiceDesc.Streams[0], "/hashmailrpc.HashMail/SendStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &hashMailSendStreamClient{stream}
	return x, nil
}

type HashMail_SendStreamClient interface {
	Send(*CipherBox) error
	CloseAndRecv() (*CipherBoxDesc, error)
	grpc.ClientStream
}

type hashMailSendStreamClient struct {
	grpc.ClientStream
}

func (x *hashMailSendStreamClient) Send(m *CipherBox) error {
	return x.ClientStream.SendMsg(m)
}

func (x *hashMailSendStreamClient) CloseAndRecv() (*CipherBoxDesc, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(CipherBoxDesc)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *hashMailClient) RecvStream(ctx context.Context, in *CipherBoxDesc, opts ...grpc.CallOption) (HashMail_RecvStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &HashMail_ServiceDesc.Streams[1], "/hashmailrpc.HashMail/RecvStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &hashMailRecvStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type HashMail_RecvStreamClient interface {
	Recv() (*CipherBox, error)
	grpc.ClientStream
}

type hashMailRecvStreamClient struct {
	grpc.ClientStream
}

func (x *hashMailRecvStreamClient) Recv() (*CipherBox, error) {
	m := new(CipherBox)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// HashMailServer is the server API for HashMail service.
// All implementations must embed UnimplementedHashMailServer
// for forward compatibility
type HashMailServer interface {
	//
	//NewCipherBox creates a new cipher box pipe/stream given a valid
	//authentication mechanism. If the authentication mechanism has been revoked,
	//or needs to be changed, then a CipherChallenge message is returned.
	//Otherwise the method will either be accepted or rejected.
	NewCipherBox(context.Context, *CipherBoxAuth) (*CipherInitResp, error)
	//
	//DelCipherBox attempts to tear down an existing cipher box pipe. The same
	//authentication mechanism used to initially create the stream MUST be
	//specified.
	DelCipherBox(context.Context, *CipherBoxAuth) (*DelCipherBoxResp, error)
	//
	//SendStream opens up the write side of the passed CipherBox pipe. Writes
	//will be non-blocking up to the buffer size of the pipe. Beyond that writes
	//will block until completed.
	SendStream(HashMail_SendStreamServer) error
	//
	//RecvStream opens up the read side of the passed CipherBox pipe. This method
	//will block until a full message has been read as this is a message based
	//pipe/stream abstraction.
	RecvStream(*CipherBoxDesc, HashMail_RecvStreamServer) error
	mustEmbedUnimplementedHashMailServer()
}

// UnimplementedHashMailServer must be embedded to have forward compatible implementations.
type UnimplementedHashMailServer struct {
}

func (UnimplementedHashMailServer) NewCipherBox(context.Context, *CipherBoxAuth) (*CipherInitResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewCipherBox not implemented")
}
func (UnimplementedHashMailServer) DelCipherBox(context.Context, *CipherBoxAuth) (*DelCipherBoxResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelCipherBox not implemented")
}
func (UnimplementedHashMailServer) SendStream(HashMail_SendStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method SendStream not implemented")
}
func (UnimplementedHashMailServer) RecvStream(*CipherBoxDesc, HashMail_RecvStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method RecvStream not implemented")
}
func (UnimplementedHashMailServer) mustEmbedUnimplementedHashMailServer() {}

// UnsafeHashMailServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HashMailServer will
// result in compilation errors.
type UnsafeHashMailServer interface {
	mustEmbedUnimplementedHashMailServer()
}

func RegisterHashMailServer(s grpc.ServiceRegistrar, srv HashMailServer) {
	s.RegisterService(&HashMail_ServiceDesc, srv)
}

func _HashMail_NewCipherBox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CipherBoxAuth)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HashMailServer).NewCipherBox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashmailrpc.HashMail/NewCipherBox",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HashMailServer).NewCipherBox(ctx, req.(*CipherBoxAuth))
	}
	return interceptor(ctx, in, info, handler)
}

func _HashMail_DelCipherBox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CipherBoxAuth)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HashMailServer).DelCipherBox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashmailrpc.HashMail/DelCipherBox",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HashMailServer).DelCipherBox(ctx, req.(*CipherBoxAuth))
	}
	return interceptor(ctx, in, info, handler)
}

func _HashMail_SendStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HashMailServer).SendStream(&hashMailSendStreamServer{stream})
}

type HashMail_SendStreamServer interface {
	SendAndClose(*CipherBoxDesc) error
	Recv() (*CipherBox, error)
	grpc.ServerStream
}

type hashMailSendStreamServer struct {
	grpc.ServerStream
}

func (x *hashMailSendStreamServer) SendAndClose(m *CipherBoxDesc) error {
	return x.ServerStream.SendMsg(m)
}

func (x *hashMailSendStreamServer) Recv() (*CipherBox, error) {
	m := new(CipherBox)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _HashMail_RecvStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CipherBoxDesc)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HashMailServer).RecvStream(m, &hashMailRecvStreamServer{stream})
}

type HashMail_RecvStreamServer interface {
	Send(*CipherBox) error
	grpc.ServerStream
}

type hashMailRecvStreamServer struct {
	grpc.ServerStream
}

func (x *hashMailRecvStreamServer) Send(m *CipherBox) error {
	return x.ServerStream.SendMsg(m)
}

// HashMail_ServiceDesc is the grpc.ServiceDesc for HashMail service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HashMail_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hashmailrpc.HashMail",
	HandlerType: (*HashMailServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewCipherBox",
			Handler:    _HashMail_NewCipherBox_Handler,
		},
		{
			MethodName: "DelCipherBox",
			Handler:    _HashMail_DelCipherBox_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendStream",
			Handler:       _HashMail_SendStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "RecvStream",
			Handler:       _HashMail_RecvStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "hashmail-lnd.proto",
}
